5/9/17
/*
Peter Cardenas, Alex Huang, and Aditya (ASSART)
Computer Science I
Start: 4..2017
End: ..2017
Jumpstone: Hearthstone with Mario Characters
*/
#include <iostream>
#include <string>
#include <graphics.h>
#include <ctime>
#include <winbgi.cpp>
#include <string>
#include <Windows.h>
#include <cmath>
using namespace std;
void gr_Start(int &GrDriver, int&GrMode, int&ErrorCode);
struct Player;
struct UserBoard;
struct OpponentBoard;
#pragma region function prototypes
void castSpell(int ID, Player player)
string setName(int ID);
int setAttack(int ID);
int setDefense(int ID);
int setManaCost(int ID);
void ability(int ID, Player player);
void minionPlacement(int ID, Player player);
void playCard(int ID, Player player);
void drawCard(Player player);
void render(int ID);
void attackMinion(UserBoard minion1, OpponentBoard minion2);
void attackCharacter(Player hero, UserBoard & minion1 = defaultMinion, OpponentBoard & minion2 = defaultMinion2);
void mulligan();
void drawBoard();
#pragma endregion
struct UserBoard {
	int ID;
	int attack;
	int defense;
	bool isInPlay;
	bool isAttacking;
	string abilityText;
	void setAbilityText(string abilityText) {
		this->abilityText = abilityText;
	}
	void setIsAttacking(bool isAttacking) {
		this->isAttacking = isAttacking;
	}
	void setIsInPlay(bool isInPlay) {
		this->isInPlay = isInPlay;
	}
	void setID(int ID) {
		this->ID = ID;
	}
	void setAttack(int attack) {
		this->attack = attack;
	}
	void setDefense(int defense) {
		this->defense = defense;
	}
}uC1, uC2, uC3, uC4, uC5, uC6, uC7;
UserBoard defaultMinion;
struct OpponentBoard {
	int ID;
	int attack;
	int defense;
	bool isInPlay;
	bool isAttacking;
	string abilityText;
	void setAbilityText(string abilityText) {
		this->abilityText = abilityText;
	}
	void setIsAttacking(bool isAttacking) {
		this->isAttacking = isAttacking;
	}
	void setIsInPlay(bool isInPlay) {
		this->isInPlay = isInPlay;
	}
	void setID(int ID) {
		this->ID = ID;
	}
	void setAttack(int attack) {
		this->attack = attack;
	}
	void setDefense(int defense) {
		this->defense = defense;
	}
}oC1, oC2, oC3, oC4, oC5, oC6, oC7;
OpponentBoard defaultMinion2;
struct Player {
	bool isUser;
	bool isOpponent;
	bool boardFull = false;
	int health = 30;
	int Deck[30];
	int Hand[7];
	int decideF;
	bool isF;
	int turn = 0;
	int mana = 0;
	int fatigueTurn = 0;
	void setMana(int mana) {
		this->mana = mana;
		return;
	}
	void isFirst() {
		decideF = rand() % 2 + 1;
		if (decideF == 1) {
			bool isF = true;
		}
		else {
			bool isF = false;
		}
	}
	void createDeck() {
		bool isDup[65];
		for (int i = 0; i < 65; i++) {
			isDup[i] = false;
		}
		Deck[0] = 3;
		Deck[1] = 4;
		Deck[2] = 5;
		Deck[3] = 8;
		Deck[4] = 11;
		Deck[5] = 16;
		Deck[6] = 20;
		Deck[7] = 28;
		Deck[8] = 34;
		Deck[9] = 41;
		Deck[10] = 42;
		Deck[11] = 43;
		Deck[12] = 53;
		Deck[13] = 55;
		Deck[14] = 58;
		for (int i = 15; i < 30; i++) {
			Deck[i] = rand() % 65 + 1;
			for (int j = 0; j < i; j++) {
				if (isDup[Deck[i]] == true) {
					j = i;
					i--;
				}
				else if (Deck[i] == Deck[j]) {
					isDup[Deck[i]] = true;
				}
			}
		}
	}
	void resetHand(int hand[]) {
		int handSize = sizeof(Hand) / sizeof(Hand[0]);
		for (int i = 0; i < handSize; i++) {
			if (hand[i] == -1) {
				for (int j = i; j < handSize; j++) {
					if (j == handSize - 1) {}
					else {
						hand[j] = hand[j + 1];
					}
				}
			}
		}
	}
	int cardsInHand(int Hand[]) {
		int handSize = sizeof(Hand) / sizeof(Hand[0]);
		int count = 0;
		for (int i = 0; i < handSize; i++) {
			if (Hand[i] > 0) {
				count++;
			}
		}
		return count;
	}
	int cardsinDeck(int Deck[]) {
		int deckSize = sizeof(Deck) / sizeof(Deck[0]);
		int count = 0;
		for (int i = 0; i < deckSize; i++) {
			if (Deck[i] > 0) {
				count++;
			}
		}
		return count;
	}
	void isDrawn(int location) {
		Deck[location] = -1;
	}
}Opponent, User;
void main() {
	srand((unsigned int)time(NULL));
	system("pause");
	return;
}
void drawBoard() {
	cleardevice();
	//rect 1: full rectangle
	int top1 = 0;
	int left1 = 0;
	int right1 = 1919;
	int bottom1 = 1017;
	setcolor(WHITE);
	bar(top1, left1, right1, bottom1);
	setcolor(BLACK);
	//rect 2: middle of board
	int top2 = 0;
	int left2 = 289;
	int right2 = 1919;
	int bottom2 = 728;
	rectangle(top2, left2, right2, bottom2);
	setcolor(RED);

	//ellipse idek anymore: end turn button
	int X = 1859;
	int Y = 509;
	int Xr = 60;
	int Yr = 40;
	ellipse(X, Y, 0, 360, 62, 42);

	ellipse(X, Y, 0, 360, Xr, Yr);

	fillellipse(X, Y, Xr, Yr);

	setcolor(0);
	// add asthetics to rect 2

	//rect 3: player 1/2 board
	int t3 = 0;
	int l3 = 0;
	int r3 = 1919;
	int b3 = 289;
	rectangle(t3, l3, r3, b3);

	//rect 4: player 1/2 board
	int t4 = 0;
	int l4 = 728;
	int r4 = 1919;
	int b4 = 1017;
	rectangle(t4, l4, r4, b4);

	//rect 5: hand
	int l5 = 36;
	int t5 = 30;
	int r5 = 228;
	int b5 = 276;
	rectangle(l5, t5, r5, b5);
	rectangle(l5 + 1, t5 + 1, r5 + 1, b5 + 1);
	rectangle(l5 + 2, t5 + 2, r5 + 2, b5 + 2);

	//rect 6: hand
	rectangle(l5 + 228, t5, r5 + 228, b5);
	rectangle(l5 + 229, t5 + 1, r5 + 229, b5 + 1);
	rectangle(l5 + 230, t5 + 2, r5 + 230, b5 + 2);

	//rect 7: hand
	rectangle(l5 + 456, t5, r5 + 456, b5);
	rectangle(l5 + 457, t5 + 1, r5 + 457, b5 + 1);
	rectangle(l5 + 458, t5 + 2, r5 + 459, b5 + 2);

	//rect 8: hand
	rectangle(l5 + 684, t5, r5 + 684, b5);
	rectangle(l5 + 685, t5 + 1, r5 + 685, b5 + 1);
	rectangle(l5 + 686, t5 + 2, r5 + 686, b5 + 2);

	//rect 9: hand
	rectangle(l5 + 912, t5, r5 + 912, b5);
	rectangle(l5 + 913, t5 + 1, r5 + 913, b5 + 1);
	rectangle(l5 + 914, t5 + 2, r5 + 914, b5 + 2);

	//rect 10: hand
	rectangle(l5 + 1140, t5, r5 + 1140, b5);
	rectangle(l5 + 1141, t5 + 1, r5 + 1141, b5 + 1);
	rectangle(l5 + 1142, t5 + 2, r5 + 1142, b5 + 2);

	//rect 11: hand
	rectangle(l5 + 1368, t5, r5 + 1368, b5);
	rectangle(l5 + 1369, t5 + 1, r5 + 1369, b5 + 1);
	rectangle(l5 + 1370, t5 + 2, r5 + 1370, b5 + 2);

	//rect 18: Hand
	int l18 = 36;
	int t18 = 738;
	int r18 = 228;
	int b18 = 997;
	rectangle(l18, t18, r18, b18);
	rectangle(l18 + 1, t18 + 1, r18 + 1, b18 + 1);
	rectangle(l18 + 2, t18 + 2, r18 + 2, b18 + 2);
	//rect 19: hand
	rectangle(l18 + 228, t18, r18 + 228, b18);
	rectangle(l18 + 229, t18 + 1, r18 + 229, b18 + 1);
	rectangle(l18 + 230, t18 + 2, r18 + 230, b18 + 2);

	//rect 20: hand
	rectangle(l18 + 456, t18, r18 + 456, b18);
	rectangle(l18 + 457, t18 + 1, r18 + 457, b18 + 1);
	rectangle(l18 + 458, t18 + 2, r18 + 458, b18 + 2);

	//rect 21: hand
	rectangle(l18 + 684, t18, r18 + 684, b18);
	rectangle(l18 + 685, t18 + 1, r18 + 685, b18 + 1);
	rectangle(l18 + 686, t18 + 2, r18 + 686, b18 + 2);

	//rect 22: hand
	rectangle(l18 + 912, t18, r18 + 912, b18);
	rectangle(l18 + 913, t18 + 1, r18 + 913, b18 + 1);
	rectangle(l18 + 914, t18 + 2, r18 + 914, b18 + 1);

	//rect 23: hand
	rectangle(l18 + 1140, t18, r18 + 1140, b18);
	rectangle(l18 + 1141, t18 + 1, r18 + 1141, b18 + 1);
	rectangle(l18 + 1142, t18 + 2, r18 + 1142, b18 + 2);

	//rect 24: hand 
	rectangle(l18 + 1368, t18, r18 + 1368, b18);
	rectangle(l18 + 1369, t18 + 1, r18 + 1369, b18 + 1);
	rectangle(l18 + 1370, t18 + 2, r18 + 1370, b18 + 2);
}
string setName(int ID) {
	string names[84] = { "Micro Goomba","Block", "Goomba", "Shy Guy", "Toad", "Bill Blaster", "Fuzzy", "Luma", "Rocky Wrench", "Cheep Cheep", "Green Koopa", "Paragoomba", "Pipe Piranha Plant",
		"Toadsworth", "Yoshi Egg", "Boo", "Bowser Jr.", "Bowser Statue", "Koopatrol", "Magikoopa", "Pokey", "Red Koopa", "Wiggler", "Boomerang Bro", "Captain Toad", "Dry Bones", "Fawful",
		"Goomba Tower", "Hammer Bro", "Lakitu", "Sledge Bro", "Toadette", "Cataquack", "Fire Bro",	"Antasma", "Goomba King", "Dry Bowser", "Honey Queen", "King Boo", "Fire Flower", "Hammer",
		"Super Mushroom", "1-up Mushroom", "Fused Bomb-omb", "Lightning", "Mario's Cap", "Super Star", "Whomp Plomp", "Castle",	"Dr. Mario Pills", "F.L.U.D.D.", "Metal Cap", "POW Block",
		"Wario's Bike", "? Block", "Damsel In Distress", "Thwomp Stomp",	"Blue Shell", "Fuzzy Madness", "Gotta Go Fast!", "Haunted Mansion", "Koopalings' Mischief",	"Mega Mushroom", "Lava Pool",
		"Wassup Bro!", "Coin", "Ball", "Bat", "Bullet Bill", "Lava Bubble", "Ring", "Spiny", "Green Shell", "Iggy", "Larry Koopa", "Lemmy Koopa", "Ludwig von Koopa", "Morton", "Roy Koopa", "War Toad",
		"Wendy O. Koopa", "Red Shell", "Sonic", "Yoshi" };
	return names[ID - 1];
}
int setAttack(int ID) {
	int attackVals[84] = { 1, 0, 2, 1, 1, 0, 2, 1, 1, 4, 2, 2, 1, 3, 0, 5, 4, 1, 3, 3, 3, 3, 2, 5, 3, 2, 5, 5, 4, 3, 9, 4, 5, 6, 3, 6, 3, 1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
		-1,	-1,	-1,	-1, -1,	-1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 2, 2, 1, 1, -1, 2, 2, 1, 1, 2, 2, 3, 1, -1, 6, 3 };
	return attackVals[ID - 1];
}
int setDefense(int ID) {
	int defenseVals[84] = { 1, 4, 2, 2, 3, 5, 2, 2, 2, 2, 2, 4, 5, 3, 3, 3, 3, 7, 5, 4, 3, 4, 5, 5, 4, 1, 4, 5, 5, 5, 7, 5, 3, 5, 7, 6, 15, 8, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
		-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,	1, 1, 1, 1, 1, 1, -1, 2, 3, 2, 2, 3, 2, 1, 3, -1, 2, 4 };
	return defenseVals[ID - 1];
}
int setManaCost(int ID) {
	int costVals[84] = { 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 8, 8, 8, 1, 1, 2, 2, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5,
		6, 6, 6, 6, 8, 10, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4 };
	return costVals[ID - 1];
}
string setAbilityText(int ID) {
	string abText[84] = {
		"",
		"Taunt",
		"",
		"Run",
		"",
		"Spawn a 2 / 1 Bullet Bill at the end of each turn",
		"When this attacks, restore 3 health to itself",
		"Draw 1 card",
		"When played, deal one damage",
		"",
		"When this dies, put a green shell to your hand",
		"Double Jump",
		"Taunt, Spiky 2"
		"Summon a Toad"
		"When this dies, summon a Yoshi"
		"This card has Invincible the turn it is played",
		"Summons 1 random Koopaling",
		"Taunt Can't attack. At the end of your turn, deal 2 damage to a random enemy."
		"Taunt When this dies, put a green shell to your hand",
		"Deal 5 damage randomly accross all enemies",
		"Spiky 1 When this dies, summon a copy of this which has - 1 / -1",
		"When this dies, put a Red Shell into your hand",
		"If this unit takes damage, gain 4 attack and Double Jump.",
		"Deal 1 damage to two random minions at the end of your turn",
		"Summon 2 War Toads",
		"When this dies, summon a Dry Bones",
		"Take control of an enemy minion that has 2 or less attack",
		"When this dies, summon a copy of this which has - 2 / -2",
		"Deal 2 damage",
		"Each turn, summon a Spiny",
		"Deal 5 damage.You can only play this card if you have played all Bros.",
		"Restore 5 Health"
		"Taunt Return a minion to its owner's hand",
		"Deal 3 damage",
		"Whenever this card takes damage, summon a bat",
		"Add 2 / 2 to every Goomba on the board",
		"Draw this card when Lava Pool is played.When played, replace your character with dry bowser.Summon two random Koopalings",
		"Heal all characters to full health",
		"Take control of a enemy minion",
		"Give unit + 2 attack",
		"Deal 2 damage",
		"Give a unit + 3 health",
		"Equip to a minion.When it dies, bring it back with half health",
		"Select a character.Deal 8 damage to it next turn.",
		"Set all minions to 1 health",
		"Give a minion \"Summon a Luma at the beginning of your turn.\"",
		"Give a minion Invincible for this turn only",
		"Destroy a minion with 3 or less attack",
		"Summon 1 random Koopaling and a Lava Bubble",
		"Heal 5 to all friendly characters",
		"Return an enemy minion to your opponent's hand",
		"Give a minion + 5 health",
		"Deal 2 damage to all minions",
		"Give a minion Run",
		"Cast a random Mario Power - up on a friendly minion",
		"Give + 3 Health to Your Minions",
		"Deal 5 damage",
		"Destroy the opponent's strongest minion",
		"Deal 2 damage all enemies and restore 2 health to all friendly characters",
		"Summon Sonic",
		"Return all minions to their owner's hand",
		"Summons 3 random Koopalings",
		"Give unit + 5 health, +7 attack",
		"Destroy all minions",
		"Summon 3 Bros.that have died this game",
		"Give 1 more Mana this turn only",
		"",
		"",
		"",
		"",
		"",
		"Spiky 1",
		"Deal 4 damage randomly across all enemies",
		"Deal 1 damage",
		"",
		"Summon two 1 / 1 Balls",
		"Add a Fire Flower to your hand",
		"Rage Give + 1 attack",
		"Run",
		"",
		"Summon a 1 / 1 Ring",
		"Deal 3 damage to a minion and 2 damage to the enemy character",
		"Run Cannot be targeted by minions",
		"Double Jump, Run"
	};
	return abText[ID - 1];
}
void userAbility(UserBoard minion) {
	
}
void opponentAbility(OpponentBoard minion){
    
}
void castSpell(Player player){
    
}
void minionPlacement(int ID, Player player) {
    if(player.isUser){
    	if (!uC1.isInPlay) {
    		uC1.setID(ID);
    		uC1.setAttack(setAttack(ID));
    		uC1.setDefense(setDefense(ID));
    		uC1.isInPlay = true;
    		player.boardFull = false;
    	}
    	else if (!uC2.isInPlay) {
    		uC2.setID(ID);
    		uC2.setAttack(setAttack(ID));
    		uC2.setDefense(setDefense(ID));
    		uC2.isInPlay = true;
    		player.boardFull = false;
    	}
    	else if (!uC3.isInPlay) {
    		uC3.setID(ID);
    		uC3.setAttack(setAttack(ID));
    		uC3.setDefense(setDefense(ID));
    		uC3.isInPlay = true;
    		player.boardFull = false;
    	}
    	else if (!uC4.isInPlay) {
    		uC4.setID(ID);
    		uC4.setAttack(setAttack(ID));
    		uC4.setDefense(setDefense(ID));
    		uC4.isInPlay = true;
    		player.boardFull = false;
    	}
    	else if (!uC5.isInPlay) {
    		uC5.setID(ID);
    		uC5.setAttack(setAttack(ID));
    		uC5.setDefense(setDefense(ID));
    		uC5.isInPlay = true;
    		player.boardFull = false;
    	}
    	else if (!uC6.isInPlay) {
    		uC6.setID(ID);
    		uC6.setAttack(setAttack(ID));   
    		uC6.setDefense(setDefense(ID));
    		uC6.isInPlay = true;
    		player.boardFull = false;
    	}
    	else if (!uC7.isInPlay) {
    		uC7.setID(ID);
    		uC7.setAttack(setAttack(ID));
    		uC7.setDefense(setDefense(ID));
    		uC7.isInPlay = true;
    		player.boardFull = false;
    	}
	    else {
	    	player.boardFull = true;
    		return;
	    }
    }
    else if (player.isOpponent){
        if (!oC1.isInPlay) {
    		oC1.setID(ID);
    		oC1.setAttack(setAttack(ID));
    		oC1.setDefense(setDefense(ID));
    		oC1.isInPlay = true;
    		player.boardFull = false;
    	}
    	else if (!oC2.isInPlay) {
    		oC2.setID(ID);
    		oC2.setAttack(setAttack(ID));
    		oC2.setDefense(setDefense(ID));
    		oC2.isInPlay = true;
    		player.boardFull = false;
    	}
    	else if (!oC3.isInPlay) {
    		oC3.setID(ID);
    		oC3.setAttack(setAttack(ID));
    		oC3.setDefense(setDefense(ID));
    		oC3.isInPlay = true;
    		player.boardFull = false;
    	}
    	else if (!oC4.isInPlay) {
    		oC4.setID(ID);
    		oC4.setAttack(setAttack(ID));
    		oC4.setDefense(setDefense(ID));
    		oC4.isInPlay = true;
    		player.boardFull = false;
    	}
    	else if (!oC5.isInPlay) {
    		oC5.setID(ID);
    		oC5.setAttack(setAttack(ID));
    		oC5.setDefense(setDefense(ID));
    		oC5.isInPlay = true;
    		player.boardFull = false;
    	}
    	else if (!oC6.isInPlay) {
    		oC6.setID(ID);
    		oC6.setAttack(setAttack(ID));   
    		oC6.setDefense(setDefense(ID));
    		oC6.isInPlay = true;
    		player.boardFull = false;
    	}
    	else if (!oC7.isInPlay) {
    		oC7.setID(ID);
    		oC7.setAttack(setAttack(ID));
    		oC7.setDefense(setDefense(ID));
    		oC7.isInPlay = true;
    		player.boardFull = false;
    	}
	    else {
	    	player.boardFull = true;
    		return;
	    }
    }
}
void playCard(int ID, Player player) {
	if ((ID >= 1 && ID <= 39) || (ID >= 67 && ID <= 72) || (ID >= 74 && ID <= 81) || (ID >= 83 && ID <= 84)) {
		minionPlacement(ID, player);
		if(player.boardFull){
		    //say that it can't play minions
		}
		else if(player.isUser){
		    userAbility(ID, UserBoard);
		}
		else if(player.isOpponent){
		    opponentAbility( )
		}
	}
	else if ((ID >= 40 && ID <= 65) || ID == 66 || ID == 73 || ID == 82) {
        castSpell(ID, player);
	}
}
void drawCard(Player player) {
	int deckSize = sizeof(player.Deck) / sizeof(player.Deck[0]);
	int handSize = sizeof(player.Hand) / sizeof(player.Hand[0]);
	int cardDrawn;
	int location;
	if (player.cardsinDeck(player.Deck) == 0) {
		if (player.fatigueTurn == 0) {
			player.fatigueTurn = player.turn;
		}
		player.health -= player.turn - (player.fatigueTurn - 1);
	}
	else {
		do {
			location = rand() % deckSize;
			cardDrawn = player.Deck[location];
		} while (cardDrawn == -1);
		if (handSize == player.cardsInHand(player.Hand)) {
			//burn card	
		}
		else {
			player.Hand[player.cardsInHand(player.Hand)] = cardDrawn;
		}
		player.isDrawn(location);
	}
}
void gameStart() {

}
void matchStart() {
	User.isUser = true;
	Opponent.isOpponent = true;
	Opponent.createDeck();
	User.createDeck();
	mulligan();
}
void decideFOS() {
	User.isFirst();
	if (User.isF) {
		Opponent.isF = false;
	}
	else {
		Opponent.isF = true;
	}
	User.turn, Opponent.turn = 1;
}
void mulligan() {
	//three cards each player, second player gets 2 coins
	decideFOS();
	int location;
	int deckSize = sizeof(User.Deck) / sizeof(User.Deck[0]);
	bool clickedRegion1;
	bool clickedRegion2;
	bool clickedRegion3;
	bool mDone;
	if (User.isF) {
		for (int i = 0; i < 3; i++) {
			location = rand() % deckSize;
			User.Hand[i] = User.Deck[location];
			User.isDrawn(location);
			location = rand() % deckSize;
			Opponent.Hand[i] = Opponent.Deck[location];
			Opponent.isDrawn(location);
		}
		Opponent.Hand[3], Opponent.Hand[4] = 66;
	}
	else if (Opponent.isF) {
		for (int i = 0; i < 3; i++) {
			location = rand() % deckSize;
			User.Hand[i] = User.Deck[location];
			User.isDrawn(location);
			location = rand() % deckSize;
			Opponent.Hand[i] = Opponent.Deck[location];
			Opponent.isDrawn(location);
		}
		User.Hand[3], User.Hand[4] = 66;
	}
	//mulligan for user
	if (mDone) {
		if (clickedRegion1) {
			while (User.Hand[0] != -1) {
				int i = 0;
				if (User.Deck[i] = -1) {
					User.Deck[i] = User.Hand[0];
					User.Hand[0] = -1;
				}
				i++;
			}
			if (clickedRegion2) {
				while (User.Hand[1] != -1) {
					int i = 0;
					if (User.Deck[i] = -1) {
						User.Deck[i] = User.Hand[1];
						User.Hand[1] = -1;
					}
					i++;
				}
				if (clickedRegion3) {
					while (User.Hand[2] != -1) {
						int i = 0;
						if (User.Deck[i] = -1) {
							User.Deck[i] = User.Hand[2];
							User.Hand[2] = -1;
						}
						i++;
					}
				}
			}
			else if (clickedRegion3) {
				while (User.Hand[2] != -1) {
					int i = 0;
					if (User.Deck[i] = -1) {
						User.Deck[i] = User.Hand[2];
						User.Hand[2] = -1;
					}
					i++;
				}
			}
		}
		else if (clickedRegion2) {
			while (User.Hand[1] != -1) {
				int i = 0;
				if (User.Deck[i] = -1) {
					User.Deck[i] = User.Hand[1];
					User.Hand[1] = -1;
				}
				i++;
			}
			if (clickedRegion3) {
				while (User.Hand[2] != -1) {
					int i = 0;
					if (User.Deck[i] = -1) {
						User.Deck[i] = User.Hand[2];
						User.Hand[2] = -1;
					}
					i++;
				}
			}
		}
		else if (clickedRegion3) {
			while (User.Hand[2] != -1) {
				int i = 0;
				if (User.Deck[i] = -1) {
					User.Deck[i] = User.Hand[2];
					User.Hand[2] = -1;
				}
				i++;
			}
		}
		for (int i = 0; i < 3; i++) {
			if (User.Hand[i] == -1) {
				location = rand() % deckSize;
				User.Hand[i] = User.Deck[location];
				User.isDrawn(location);
			}
		}
	}
	//mulligan for computer (opponent)
}
void turn() {
	if (User.isF) {
		if (User.turn == Opponent.turn) { // Do User 
			drawCard(User);
			User.setMana(User.turn);
		}
		else if (User.turn > Opponent.turn) { // Do Opponent
			drawCard(Opponent);
			Opponent.setMana(Opponent.turn);
		}
	}
	else if (Opponent.isF) {
		if (Opponent.turn == User.turn) { // Do Opponent 
			drawCard(Opponent);
			Opponent.setMana(Opponent.turn);
		}
		else if (Opponent.turn > User.turn) { // Do User
			drawCard(User);
			User.setMana(User.turn);
		}
	}
}
void render(int ID) {

}
void attackCharacter(Player hero, UserBoard & minion1 = defaultMinion, OpponentBoard & minion2 = defaultMinion2) {
	if (minion1.isAttacking) {
		hero.health -= minion1.attack;
		minion1.setIsAttacking(false);
	}
	if (minion2.isAttacking) {
		hero.health -= minion2.attack;
		minion2.setIsAttacking(false);
	}
}
void attackMinion(UserBoard minion1, OpponentBoard minion2) {
	//hero attack is 0
	if (minion1.isAttacking) {
		minion1.setDefense(minion1.defense - minion2.attack);
		minion2.setDefense(minion2.defense - minion1.attack);
		minion1.setIsAttacking(false);
	}
	else {
		minion1.setDefense(minion1.defense - minion2.attack);
		minion2.setDefense(minion2.defense - minion1.attack);
		minion2.setIsAttacking(false);
	}
}
void gr_Start(int &GrDriver, int&GrMode, int&ErrorCode) {
	//set the graphics driver
	GrDriver = VGA; //800x600 by monitor
	GrMode = VGAMAX;//set graphics mode
	initgraph(&GrDriver, &GrMode, "");//start graphics
									  //check for problems
	ErrorCode = graphresult();
	if (ErrorCode != grOk)
	{
		cout << "Error:" << ErrorCode;
	}
}
